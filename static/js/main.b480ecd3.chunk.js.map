{"version":3,"sources":["components/form.js","components/list.js","App.js","serviceWorker.js","index.js"],"names":["Tableform","props","state","returnStateObject","HandleInputChange","e","setState","target","name","value","HandleSubmit","preventDefault","onAddorEdit","this","currentIndex","Fname","Lname","Age","PhNo","email","list","prevProps","length","onSubmit","autoComplete","placeholder","onChange","type","Component","Tablelist","data","returnList","push","localStorage","setItem","JSON","stringify","HandleEdit","index","getItem","parse","map","item","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAqDeA,E,kDAhDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAJRC,MAGkB,eAFb,EAAKC,qBAEQ,EAuBlBC,kBAAoB,SAAAC,GAClB,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,SAzBf,EA4BlBC,aAAe,SAAAL,GACbA,EAAEM,iBACF,EAAKV,MAAMW,YAAY,EAAKV,QA9BZ,E,gEAMd,OAA+B,GAA5BW,KAAKZ,MAAMa,aACP,CACLC,MAAO,GACPC,MAAO,GACPC,IAAK,GACLC,KAAM,GACNC,MAAO,IAGFN,KAAKZ,MAAMmB,KAAKP,KAAKZ,MAAMa,gB,yCAGnBO,GACdA,EAAUP,cAAgBD,KAAKZ,MAAMa,cAAgBO,EAAUD,KAAKE,QAAUT,KAAKZ,MAAMmB,KAAKE,QACjGT,KAAKP,SAAL,eAAkBO,KAAKV,wB,+BAevB,OACC,0BAAMoB,SAAYV,KAAKH,aAAcc,aAAe,OAClD,2BAAOhB,KAAO,QAAQiB,YAAc,aAAahB,MAASI,KAAKX,MAAMa,MAAOW,SAAYb,KAAKT,oBAA2B,6BACxH,2BAAOI,KAAO,QAAQiB,YAAc,YAAYhB,MAASI,KAAKX,MAAMc,MAAOU,SAAYb,KAAKT,oBAA2B,6BACvH,2BAAOI,KAAO,MAAMiB,YAAc,MAAMhB,MAASI,KAAKX,MAAMe,IAAKS,SAAYb,KAAKT,oBAA2B,6BAC7G,2BAAOI,KAAO,OAAOiB,YAAc,YAAYhB,MAASI,KAAKX,MAAMgB,KAAMQ,SAAYb,KAAKT,oBAA2B,6BACrH,2BAAOI,KAAO,QAAQiB,YAAc,WAAWhB,MAASI,KAAKX,MAAMiB,MAAOO,SAAYb,KAAKT,oBAA2B,6BACtH,4BAAQuB,KAAO,UAAf,e,GA9CiBC,aC+DTC,E,kDA7Db,WAAY5B,GAAO,IAAD,8BAChB,cAAMA,IAeRW,YAAa,SAACkB,GACZ,IAAIV,EAAO,EAAKW,cACe,GAA5B,EAAK7B,MAAMY,aACdM,EAAKY,KAAKF,GAEVV,EAAK,EAAKlB,MAAMY,cAAgBgB,EAChCG,aAAaC,QAAS,UAAWC,KAAKC,UAAUhB,IAChD,EAAKd,SAAS,CAACc,KAAMA,KAvBL,EAyBlBiB,WAAa,SAAAC,GACX,EAAKhC,SAAS,CACZQ,aAAewB,KAzBjB,EAAKpC,MAAM,CACTkB,KAAM,EAAKW,aACXjB,cAAgB,GAJF,E,yDAYhB,OAJsC,MAAnCmB,aAAaM,QAAQ,YAExBN,aAAaC,QAAQ,UAAUC,KAAKC,UAAU,KAEvCD,KAAKK,MAAMP,aAAaM,QAAQ,c,+BAmBhC,IAAD,OACN,OACE,6BACM,kBAAC,EAAD,CAAW3B,YAAeC,KAAKD,YAC/BE,aAAgBD,KAAKX,MAAMY,aAC3BM,KAAQP,KAAKX,MAAMkB,OACnB,6BACA,+BACE,+BAEIP,KAAKX,MAAMkB,KAAKqB,KAAI,SAACC,EAAKJ,GACxB,OAAO,wBAAIK,IAAOL,GAChB,4BAAKI,EAAK3B,OACV,4BAAK2B,EAAK1B,OACV,4BAAK0B,EAAKzB,KACV,4BAAKyB,EAAKxB,MACV,4BAAKwB,EAAKvB,OACV,4BAAI,4BAAQyB,QAAW,kBAAK,EAAKP,WAAWC,KAAxC,oB,GAjDFV,aCQTiB,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b480ecd3.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nclass Tableform extends Component{\r\n  state = {\r\n    ...this.returnStateObject()\r\n  }\r\n  constructor(props){\r\n    super(props)\r\n    \r\n    }\r\n    returnStateObject()\r\n    {\r\n      if(this.props.currentIndex == -1)\r\n      return {\r\n        Fname: '',\r\n        Lname: '',\r\n        Age: '',\r\n        PhNo: '',\r\n        email: ''\r\n      }\r\n      else\r\n      return this.props.list[this.props.currentIndex];\r\n    }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if(prevProps.currentIndex != this.props.currentIndex || prevProps.list.length != this.props.list.length)\r\n    this.setState({...this.returnStateObject()})\r\n  }\r\n  \r\n  HandleInputChange = e => {\r\n    this.setState({\r\n        [e.target.name] : e.target.value\r\n    });\r\n  }\r\n  HandleSubmit = e =>{\r\n    e.preventDefault()\r\n    this.props.onAddorEdit(this.state)\r\n\r\n  }\r\n  \r\n  render(){\r\n    return(\r\n     <form onSubmit = {this.HandleSubmit} autoComplete = \"off\">\r\n       <input name = \"Fname\" placeholder = \"First Name\" value = {this.state.Fname} onChange = {this.HandleInputChange}></input><br/>\r\n       <input name = \"Lname\" placeholder = \"Last Name\" value = {this.state.Lname} onChange = {this.HandleInputChange}></input><br/>\r\n       <input name = \"Age\" placeholder = \"Age\" value = {this.state.Age} onChange = {this.HandleInputChange}></input><br/>\r\n       <input name = \"PhNo\" placeholder = \"Phone no:\" value = {this.state.PhNo} onChange = {this.HandleInputChange}></input><br/>\r\n       <input name = \"email\" placeholder = \"Email id\" value = {this.state.email} onChange = {this.HandleInputChange}></input><br/>\r\n       <button type = \"submit\">SUBMIT</button>\r\n\r\n     </form>\r\n    )\r\n  }\r\n}\r\nexport default Tableform","import React, {Component} from 'react'\r\nimport Tableform from './form';\r\nclass Tablelist extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      list: this.returnList(),\r\n      currentIndex : -1\r\n    }\r\n  }\r\n  returnList(){\r\n    if(localStorage.getItem('details') == null)\r\n    {\r\n    localStorage.setItem('details',JSON.stringify([]))\r\n    }\r\n    return JSON.parse(localStorage.getItem('details'))\r\n\r\n  }\r\n\r\n  onAddorEdit= (data) =>{\r\n    var list = this.returnList()// takes the data already existing in local storage\r\n    if(this.state.currentIndex == -1)\r\n    list.push(data) //adds new data to the existing one\r\n    else\r\n    list[this.state.currentIndex] = data\r\n    localStorage.setItem(('details'),JSON.stringify(list))// adds new set of values to local storage\r\n    this.setState({list: list})// updates the state\r\n  }\r\n  HandleEdit = index =>{\r\n    this.setState({\r\n      currentIndex : index\r\n    })\r\n\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n            <Tableform onAddorEdit = {this.onAddorEdit}\r\n            currentIndex = {this.state.currentIndex}\r\n            list = {this.state.list} />\r\n            <hr/>\r\n            <table>\r\n              <tbody>\r\n                {\r\n                  this.state.list.map((item,index) => {\r\n                    return <tr key = {index}>\r\n                      <td>{item.Fname}</td>\r\n                      <td>{item.Lname}</td>\r\n                      <td>{item.Age}</td>\r\n                      <td>{item.PhNo}</td>\r\n                      <td>{item.email}</td>\r\n                      <td><button onClick = {() =>this.HandleEdit(index)}>EDIT</button></td>\r\n\r\n                    </tr>\r\n\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Tablelist","import React from 'react';\nimport './App.css';\nimport Tablelist from './components/list';\n\nfunction App() {\n  return (\n    <Tablelist/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}